# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import helloc_pb2 as helloc__pb2


class BibiliStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/test.Bibili/SayHello',
                request_serializer=helloc__pb2.HelloRequest.SerializeToString,
                response_deserializer=helloc__pb2.HelloReply.FromString,
                )
        self.SayTestHello = channel.stream_unary(
                '/test.Bibili/SayTestHello',
                request_serializer=helloc__pb2.HelloTestRequest.SerializeToString,
                response_deserializer=helloc__pb2.HelloTestReply.FromString,
                )
        self.TestClientRecvStream = channel.unary_stream(
                '/test.Bibili/TestClientRecvStream',
                request_serializer=helloc__pb2.TestClientRecvStreamRequest.SerializeToString,
                response_deserializer=helloc__pb2.TestClientRecvStreamResponse.FromString,
                )
        self.TestClientSendStream = channel.stream_unary(
                '/test.Bibili/TestClientSendStream',
                request_serializer=helloc__pb2.TestClientSendStreamRequest.SerializeToString,
                response_deserializer=helloc__pb2.TestClientSendStreamResponse.FromString,
                )
        self.TestClientTwoStream = channel.stream_stream(
                '/test.Bibili/TestClientTwoStream',
                request_serializer=helloc__pb2.TestClientTwoStreamRequest.SerializeToString,
                response_deserializer=helloc__pb2.TestClientTwoStreamResponse.FromString,
                )


class BibiliServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SayTestHello(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientRecvStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientSendStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientTwoStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BibiliServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=helloc__pb2.HelloRequest.FromString,
                    response_serializer=helloc__pb2.HelloReply.SerializeToString,
            ),
            'SayTestHello': grpc.stream_unary_rpc_method_handler(
                    servicer.SayTestHello,
                    request_deserializer=helloc__pb2.HelloTestRequest.FromString,
                    response_serializer=helloc__pb2.HelloTestReply.SerializeToString,
            ),
            'TestClientRecvStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TestClientRecvStream,
                    request_deserializer=helloc__pb2.TestClientRecvStreamRequest.FromString,
                    response_serializer=helloc__pb2.TestClientRecvStreamResponse.SerializeToString,
            ),
            'TestClientSendStream': grpc.stream_unary_rpc_method_handler(
                    servicer.TestClientSendStream,
                    request_deserializer=helloc__pb2.TestClientSendStreamRequest.FromString,
                    response_serializer=helloc__pb2.TestClientSendStreamResponse.SerializeToString,
            ),
            'TestClientTwoStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestClientTwoStream,
                    request_deserializer=helloc__pb2.TestClientTwoStreamRequest.FromString,
                    response_serializer=helloc__pb2.TestClientTwoStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.Bibili', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bibili(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.Bibili/SayHello',
            helloc__pb2.HelloRequest.SerializeToString,
            helloc__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SayTestHello(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/test.Bibili/SayTestHello',
            helloc__pb2.HelloTestRequest.SerializeToString,
            helloc__pb2.HelloTestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientRecvStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/test.Bibili/TestClientRecvStream',
            helloc__pb2.TestClientRecvStreamRequest.SerializeToString,
            helloc__pb2.TestClientRecvStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientSendStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/test.Bibili/TestClientSendStream',
            helloc__pb2.TestClientSendStreamRequest.SerializeToString,
            helloc__pb2.TestClientSendStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientTwoStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bibili/TestClientTwoStream',
            helloc__pb2.TestClientTwoStreamRequest.SerializeToString,
            helloc__pb2.TestClientTwoStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
